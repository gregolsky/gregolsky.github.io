<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel> <title>Coding useful stuff.</title><link>http://gregolsky.github.io</link><description>Grzegorz Lachowski</description><atom:link href="http://gregolsky.github.io/feed.xml" rel="self" type="application/rss+xml"></atom:link><item><title>Trying out Harp</title><description><![CDATA[<p>I always wanted to start a blog.</p>
<p>I decided it needs to be an easy to maintain static webpage. It should also support Markdown and I want to build it from ground up learning some cool stuff along the way.</p>
<p>My first idea was to use <a href="http://yeoman.io/">Yeoman</a> to scaffold an app using <code>gulp-webapp</code> generator. Yo gulp-webapp! Done. Please don&#39;t get me wrong - I love <code>gulp-webapp-generator</code> and Yeoman, yet I wasn&#39;t happy about spending next hour on Gulpfile customization, because I am never satisfied with the defaults plus I used it in the past, so there was nothing new to learn. Also time I wanted to get to design and content as quickly as possible. I wanted less configuration, support for the new cool web stuff out-of-the-box and it would be great if it&#39;s Node.js based. And then after some more googling I found <a href="http://harpjs.com/">Harp</a>. Harp among other things is a Node.js-based web server with built-in transpilers for all frontend goodies like template engines (Jade and EJS), CSS preprocessors (SCSS, LESS), Markdown, Coffescript and convention-over-configuration approach. It processes your files on the fly and serves as plain old HTML and CSS.</p>
<p>The 3 main Harp commands I use are <code>init</code>, <code>server</code> and <code>compile</code>. Using <code>init</code> you can scaffold an empty Harp project using the boilerplate of your choice. The <code>server</code> command starts the development server, which I already mentioned (serves and transpiles) and once you are done developing your website you can use the <code>compile</code> command to transpile and minify all your shiny project files, so you can put them on a server for people to see.</p>
<p>While all this automation and conventions are nice, yet I quickly missed my gulp tasks and e.g. browser-sync. But all is not lost, because the internet already thought of that - here&#39;s the <a href="https://gist.github.com/geelen/a5fcb013de67f680cb8d">gist</a> for a Gulpfile combining browser-sync and Harp server. You can now have a Gulp accompanying your Harp setup.</p>
<p>To sum up, I think Harp is a great tool for beginners and people, who value the simplicity and <del>are a bit lazy</del> want to quickly start something skipping the misery of initial project configuration and rely more on predefined conventions. What I can say for sure it&#39;s perfect for small projects (like a static blog), but I suspect once you need some more complex work done, then you are probably going to miss Grunt/Gulp flexibility.</p>
<p>As this blog was created using Harp, do not forget to check out <a href="https://github.com/gregolsky/blog">the source</a> or try Harp on your own. There is a great developer&#39;s guide on Harp&#39;s website and some ready to use recipes like for building a blog. Go check! See ya.</p>
]]></description><pubDate>Sun Aug 30 2015 02:00:00 GMT+0200 (CEST)</pubDate><link>http://gregolsky.github.io/articles/trying-out-harp</link><guid isPermaLink="true">http://gregolsky.github.io/articles/trying-out-harp</guid></item><item><title>Paycode or how to photocode your money transfers</title><description><![CDATA[<p>Returning money you borrowed from a friend is hard, isn&#39;t it? No, I am not going to tackle financial or social reasons for not returning the money. I mean it in a technical kind of way and I think of those little loans we make, when it&#39;s just more practical for one person to pay for the thing and then the others need to return their part. What do we do then?
If we have cash, then we can just use it and be done with this, however I am one of those guys that do not carry cash around. We have cards nowadays right? But you can&#39;t use it to give the money back to your friend. So at minimum you need to:</p>
<ul>
<li>have his name,</li>
<li>have his acc#,</li>
<li>know the amount,</li>
<li>access your bank account to make the money transfer</li>
</ul>
<p>The name and amount are simple to remember, but passing the account number is hard and error prone. Copy pasting does not help much with this. For access to your online bank account you can use your computer or.. your phone. Wait a sec. Can we simplify this? You do pay your bills using <a href="https://en.wikipedia.org/wiki/QR_code">QR codes</a> right? What are QR codes?</p>
<p>Here&#39;s <a href="https://en.wikipedia.org/wiki/QR_code">QR code article from Wikipedia</a>. Basically QR code is a little piece of information encoded into a square barcode. Among other things it can hold your money transfer information. E.g. a money transfer QR code data look like this:</p>
<pre><code>|PL|35000000000000370264110315|010000|Grzegorz Lachowski|transfer title|||
</code></pre><p>And the code itself looks like this:</p>
<center><img src="http://i.imgur.com/QMSXFz2.png" alt="|PL|35000000000000370264110315|010000|Grzegorz Lachowski|transfer title|||" title="Money transfer QR code example"></center>

<p>It is a simple |-separated text format encoded into a barcode. Only required fields have been filled in:</p>
<ul>
<li><code>PL</code> - a country code (ISO 3166-1 alfa-2),</li>
<li><code>35000000000000370274110914</code> - acc# (26 numbers, this one&#39;s fake),</li>
<li><code>010000</code> - amount field (this is the value of 100 zlotys),</li>
<li><code>Grzegorz Lachowski</code> - transfer receiver name,</li>
<li><code>transfer title</code> - transfer title :)</li>
</ul>
<p>Using QR codes for money transfer is very convenient. I pay my bills this way and you should too! Sadly I haven&#39;t seen an option anywhere to create your own money transfer QR codes. That&#39;s why I made PayCode. A little webapp to create your own money transfer QR codes. This is how it works:</p>
<ol>
<li>Go to <a href="http://gregolsky.github.io/paycode/">http://gregolsky.github.io/paycode/</a></li>
<li>Fill in your transfer data - don&#39;t worry it does not save anything anywhere - it&#39;s client-side only.</li>
<li>Click the submit button.</li>
<li>You will be redirected to the unique page with the qr code, for which the link you can pass to your friends.</li>
</ol>
<p>That&#39;s it. It uses qrcode.js library, which uses canvas to generate the code. It&#39;s not perfect yet, but the basic functionality works. I still need to work on multi-lingual support, validation, shortening the unique URL and UTF-8 support in the transfer fields (QR code generation library I use does not support it yet). I hope it helps you in some way. Be sure to check the <a href="https://github.com/gregolsky/paycode">code on my GitHub</a>.</p>
]]></description><pubDate>Wed Nov 11 2015 01:00:00 GMT+0100 (CET)</pubDate><link>http://gregolsky.github.io/articles/paycode</link><guid isPermaLink="true">http://gregolsky.github.io/articles/paycode</guid></item><item><title>Quick access to your Chrome apps</title><description><![CDATA[<p>Release of a version 2.0 of my little Chrome extension is a great opportunity to write about it, as I did not have a chance to do so on this blog yet. The story begins I believe 2 or 3 years ago, when Google decided to introduce <em>Chrome apps</em>. Along with that change they added shortcuts on the new Chrome tab to launch them. Some time after that, they changed their mind and moved away from the apps shortcuts visible on the new tab page. Apparently nobody was using it, so they introduced <a href="chrome://apps">Apps page</a> that shows exactly that thing we know from the past.</p>
<p>Well, I missed apps&#39; shortcuts on the new tab page, so I learned how to create a Chrome extension in hope to once again bend the world&#39;s state to my purpose. I thought why do I need to open a new tab to view my Chrome apps. Can I make a popup showing my apps? One that would mimic Google&#39;s solution with all the drag&#39;n&#39;drop reordering goodness, nice icons and fonts? Sure I can. Here&#39;s the <a target="_blank" href="https://chrome.google.com/webstore/detail/apps-launcher/ijmgkhchjindcjamnckoiahagecjnkdc">Apps Launcher</a>.</p>
<center><img src="https://lh3.googleusercontent.com/SOvqm3KxGS-uonXKorAS8LUiqQqw_T936_8I-BJBSVFYF-rDnxpooqCIp2eg71Kkte9JzOchRA=s640-h400-e365-rw" /></center>

<p>At first it was a little Angular.js application with a pinch of JQuery and a grid from Bootstrap. It was fast to develop, but resulted in a quite heavy build. It was working, but was a little to slow to open for a popup with circa 15 icons.</p>
<p>Time was passing, people were using it and installed it freaking 120k times, which is a huge success for me (for a project that&#39;s being developed in just my free time), so I decided to optimize it and rebuild it in vanilla JS and here it is. In version 2.0 the only client dependency is <a target="_blank" href="http://rubaxa.github.io/Sortable/"><em>Sortable</em></a> - a little, but great library for reordering items in lists and grids (without any dependencies!). As for transpilers <em>Apps Launcher</em> is using <a target="_blank" href="https://babeljs.io/"><em>Babel</em></a> and <a target="_blank" href="http://sass-lang.com/"><em>Sass</em></a>. It&#39;s also loading much faster. When I measured it, it was 72ms, while the old one sometimes reached 1s or more.</p>
<p>It&#39;s always a great pleasure to create something, that works and makes your life easier and to learn something new along the way. I wrote it for myself, but I am really happy to see that there are people using it around the world. The source is on <a href="https://github.com/gregolsky/chrome-app-launcher">my GitHub</a> and it&#39;s free to <a href="https://chrome.google.com/webstore/detail/apps-launcher/ijmgkhchjindcjamnckoiahagecjnkdc">install from Chrome Webstore</a>.</p>
]]></description><pubDate>Wed Jan 06 2016 01:00:00 GMT+0100 (CET)</pubDate><link>http://gregolsky.github.io/articles/apps-launcher-2-0</link><guid isPermaLink="true">http://gregolsky.github.io/articles/apps-launcher-2-0</guid></item><item><title>TSLint rulez</title><description><![CDATA[<p>To write truly testable and easily understandable code among other things it is important to keep things short. And by that I don&#39;t mean to pack your functions in one line. Robert C. Martin (also known as Uncle Bob) once said:</p>
<blockquote>
<p>The first rule of functions is that they should be small. The second rule of functions is that they should be smaller than that. Functions should not be 100 lines long. Functions should hardly ever be 20 lines long.</p>
</blockquote>
<p>That was something I wanted to enforce in TypeScript project I was working on and I thought it could be easily done using a linter. For TypeScript there&#39;s <em><a href="https://www.npmjs.com/package/tslint">TSLint</a></em>, for ES6 - <em>ESLint</em>. Unfortunately there was no such rule validating lines number of a function. There&#39;s one rule called <code>max-line-length</code>, which makes sure you don&#39;t write too long lines (horizontal length), however there was none for vertical function length. For <em>ESLint</em> I saw one rule checking the complexity and one checking the number of statements, but it wasn&#39;t the same. Well, since you can write custom rules for <em>TSLint</em> I launched my editor and started to code my first custom <em>TSLint</em> rule.</p>
<p>There are 3 repositories containing <em>TSLint</em> rules:</p>
<ul>
<li><a href="https://github.com/palantir/tslint">the TSLint repository itself</a></li>
<li><a href="https://github.com/buzinas/tslint-eslint-rules">tslint-eslint-rules</a></li>
<li><a href="https://github.com/Microsoft/tslint-microsoft-contrib">tslint-microsoft-contrib</a></li>
</ul>
<p>Since the last one included some extra <code>grunt</code> tasks for scaffolding a new rule and some pleasing test infrastructure I went there directly, cloned it and coded away. Once you clone <code>tslint-microsoft-contrib</code> repo and install NPM packages to create a new rule use <code>create-rule</code> Grunt task:</p>
<pre><code>$ grunt create-rule --rule-name max-func-body-length
</code></pre><p>It is going to create a <code>src/maxFuncBodyLengthRule.ts</code> file where you implement your rule and a unit test file under <code>test/MaxFuncBodyLengthRuleTests.ts</code>. Basically you just need to override <code>visitX</code> methods of your rule&#39;s walker class, add failures to linting result and that&#39;s it. You can find detailed information on creating custom rules <a href="https://github.com/palantir/tslint#writing-custom-rules">here</a>. And here&#39;s my original <a href="https://github.com/Microsoft/tslint-microsoft-contrib/pull/103">PR</a> and the merged contribution - <a href="https://github.com/Microsoft/tslint-microsoft-contrib/blob/master/src/maxFuncBodyLengthRule.ts">rule source</a> and <a href="https://github.com/Microsoft/tslint-microsoft-contrib/blob/master/tests/MaxFuncBodyLengthRuleTests.ts">unit tests</a>.</p>
<p>As for this rule&#39;s options in <code>tslint.json</code> config file you can specify the general max length like this:</p>
<ul>
<li>to enforce 20 lines number limit on all functions including methods and arrow functions<pre><code>&quot;max-func-body-length&quot;: [ true, 20 ]
</code></pre></li>
<li>to enforce limits as follows: 20 for loose functions, 10 for arrow functions, 15 for methods.<pre><code class="language-json">&quot;max-func-body-length&quot;: [ true, {
    &quot;func-body-length&quot;: 20,
    &quot;arrow-body-length&quot;: 10,
    &quot;method-body-length&quot;: 15
    }
  ]
</code></pre>
</li>
</ul>
<p>There&#39;s one more switch here that may become handy when running this rule through unit tests code. Since e.g. <code>mocha</code> test fixtures are provided as functions to <em>describe()</em> function they can get pretty lengthy and will exceed our limits for sure. To avoid validation of such fixtures one can pass a regex string to <em>ignore-parameters-to-function-regex</em>. Linter won&#39;t validate functions passed to function, which names match that regex. To fix validation of your <code>mocha</code> tests just use it like this:</p>
<pre><code class="language-json">&quot;max-func-body-length&quot;: [ true, 20, {
        &quot;ignore-parameters-to-function-regex&quot;: &quot;describe&quot;
    }
]
</code></pre>
<p>Linter messages are going to look similarly to:</p>
<pre><code>$ tslint -r tslint-rules aaa.ts
aaa.ts[6, 5]: Max constructor body length exceeded in class John - max: 5, actual: 7
aaa.ts[16, 1]: Max function body length exceeded in function magic() - max: 5, actual: 21
aaa.ts[22, 13]: Max arrow function body length exceeded - max: 5, actual: 7
</code></pre><p>Happy linting!</p>
]]></description><pubDate>Sat Mar 05 2016 01:00:00 GMT+0100 (CET)</pubDate><link>http://gregolsky.github.io/articles/tslint-rulez</link><guid isPermaLink="true">http://gregolsky.github.io/articles/tslint-rulez</guid></item></channel></rss>