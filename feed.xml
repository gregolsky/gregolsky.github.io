<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel> <title>Grzegorz Lachowski</title><link>http://gregolsky.github.io</link><description>Tech, programming, UX frustrations and a bit of life hacking.</description><atom:link href="http://gregolsky.github.io/feed.xml" rel="self" type="application/rss+xml"></atom:link><item><title>Trying out Harp</title><description><![CDATA[<p>I always wanted to start a blog.</p>
<p>I decided it needs to be an easy to maintain static webpage. It should also support Markdown and I want to build it from ground up learning some cool stuff along the way.</p>
<p>My first idea was to use <a href="http://yeoman.io/">Yeoman</a> to scaffold an app using <code>gulp-webapp</code> generator. Yo gulp-webapp! Done. Please don&#39;t get me wrong - I love <code>gulp-webapp-generator</code> and Yeoman, yet I wasn&#39;t happy about spending next hour on Gulpfile customization, because I am never satisfied with the defaults plus I used it in the past, so there was nothing new to learn. Also time I wanted to get to design and content as quickly as possible. I wanted less configuration, support for the new cool web stuff out-of-the-box and it would be great if it&#39;s Node.js based. And then after some more googling I found <a href="http://harpjs.com/">Harp</a>. Harp among other things is a Node.js-based web server with built-in transpilers for all frontend goodies like template engines (Jade and EJS), CSS preprocessors (SCSS, LESS), Markdown, Coffescript and convention-over-configuration approach. It processes your files on the fly and serves as plain old HTML and CSS.</p>
<p>The 3 main Harp commands I use are <code>init</code>, <code>server</code> and <code>compile</code>. Using <code>init</code> you can scaffold an empty Harp project using the boilerplate of your choice. The <code>server</code> command starts the development server, which I already mentioned (serves and transpiles) and once you are done developing your website you can use the <code>compile</code> command to transpile and minify all your shiny project files, so you can put them on a server for people to see.</p>
<p>While all this automation and conventions are nice, yet I quickly missed my gulp tasks and e.g. browser-sync. But all is not lost, because the internet already thought of that - here&#39;s the <a href="https://gist.github.com/geelen/a5fcb013de67f680cb8d">gist</a> for a Gulpfile combining browser-sync and Harp server. You can now have a Gulp accompanying your Harp setup.</p>
<p>To sum up, I think Harp is a great tool for beginners and people, who value the simplicity and <del>are a bit lazy</del> want to quickly start something skipping the misery of initial project configuration and rely more on predefined conventions. What I can say for sure it&#39;s perfect for small projects (like a static blog), but I suspect once you need some more complex work done, then you are probably going to miss Grunt/Gulp flexibility.</p>
<p>As this blog was created using Harp, do not forget to check out <a href="https://github.com/gregolsky/blog">the source</a> or try Harp on your own. There is a great developer&#39;s guide on Harp&#39;s website and some ready to use recipes like for building a blog. Go check! See ya.</p>
]]></description><pubDate>Sun Aug 30 2015 02:00:00 GMT+0200 (CEST)</pubDate><link>http://gregolsky.github.io/articles/trying-out-harp</link><guid isPermaLink="true">http://gregolsky.github.io/articles/trying-out-harp</guid></item></channel></rss>